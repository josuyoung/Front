Array 객체의 메소드
ex. let arr = new Array("1,2,3,4,5")
push()  : 배열에 요소를 추가
pop()   : 배열의 마지막 주소에 있는 값을 제거
shift() : 배열의 첫번째 주소에 있는 값을 제거
concat(): 두개의 배열을 합침
join()  : 배열 요소 사이에 원하느 문자 삽입
reverse() :배열을 역순으로 재배치
sort()  : 배열을 오름차순으로 정렬

for in 문
- 변수에 키를 저장

??객체는 배열?
let arr3 = [80,40,20,40,10];

    for(변수 in 배열){
        배열의 요소 개수만큼 반복할 문장;
        ...
}

for of 문
- 변수의 값을 저장

    for(변수 of 배열){
        배열의 요소 개수만큼 반복할 문장;
        ...
}

forEach 문
- 오직 Array 객체에서만 사용

    배열.forEach(콜백함수(item,index,arr){
        배열의 요소의 개수만큼 반복할 문장;
        ...

    })
item : 값
index : 인덱스
arr : 현재 배열

사용자 정의 함수(function)
- 하나의 특별한 목적의 작업을 수행하도록 설계된 독립적인 블록을 의미
- 함수는 필요할 때마자 호출하여 해당 작업을 반복해서 수행하기 때문에 코드를 
    재활용 할 수 잇음

1. 함수 선언식
    function 함수명(매개변수1, 매개변수2,...){
        ...
        return 리턴값;
    }
2. 함수 표현식
    const 함수명 = function(매개변수1,매개변수2,...){
        ...
        return 리턴값;
    }

** 자바스크립트는 함수를 변수에 저장할 수 있음
** 자바스크립트는  script 태그를 만나면 자바스크립트를 읽고 선언된 함수를 먼저 메모리에 저장 

호이스팅(hoisting)
- 함수안에 잇는 선언문들을 모두 끌어올려서 해당 함수 유효범위의 최상단에 선언
- 자바스크립트 함수는 실행되기 전에 함수안에 필요한 변수값들을 모두 모아서 유효범위의 최상단에 선언
- var변수, 함수 선언식만 호이스팅이 일어남
- ECMAScript5 이전에는 사용된 적이 없는 용어

함수 만들기

1. 이름만 존재하는 함수

    function 함수명(){
        함수가 호출되었을 때 실행할 문장;
    }

함수명();

2. 매개변수가 있는 함수

    function 함수명(매개변수1, 매개변수2, ...){
        함수가 호출되었을 때 실행할 문장;
        
    }
    함수명(값1,값2);

    ✔ 디폴트 매개변수
        - 매개변수를 정하지 않으면 대신 기본값을 변수에 저장

     function 함수명(매개변수1 = 값1, 매개변수2 = 값2, ...){
        함수가 호출되었을 때 실행할 문장;
        
    }
    함수명(값1,값2)
    함수명(값1);
    함수명();


    ✔ 나머지 매개변수
    - 생략 접두사(...)를 사용하여 특정 위치의 인수부터 마지막 인수까지 한번에 지정

     function 함수명(매개변수1, ...매개변수2, ...){
        함수가 호출되었을 때 실행할 문장;
        
    }
    함수명(값1,값2,값3,값4,값5...);
    매개변수1에 값2이 들어가고 나머지는 매개변수2에 배열로 들어감

3. 리턴값이 있는 함수

     function 함수명(매개변수1, 매개변수2, ...){
        함수가 호출되었을 때 실행할 문장;
        ...
        return 값;

    }

    변수 = 함수명(값1,값2...)

문제. 두개의 숫자를 입력받아 사칙연산을 출력하는 프로ㅡ램
(단, 함수는 각 연산에 따라 작성,return구문을 사용)

첫번째 숫자를 입력하세요. 10
두번째 숫자를 입력하세요. 5

10 + 3 = 13
10 - 3 = 7
10 * 3 = 30
10 / 3 = 3


화살표 함수
- function 키워드를 사용하여 함수를 만드든 것보다 간단히 표현
- 화상표 함수는 항상 익명함수

    const 함수명(변수,상수) =(매개변수1, 매개변수2) => 실행문 ; 

    함수명(값1,값2);

1.이름만 있는 함수

    function func1(){
        console.log('안녕하세요');
    }
    
    const func1= () => console.log('안녕하세요!');

2.매개변수가있는 함수

    function func1(매개변수1,매개변수2..){
        console.log(`매개변수로 전달받은값${매개변수1});
    }
    
    const func1 = x => console.log(`매개변수로 전달받은값:${x}`);
    const func1 = (x,y) => console.log(`매개변수로 전달받은값:${x},${y}`);
    
3.리턴값이 있는 함수

    const func3 = (x,y) => {
        let sum = 0;
        for(let i = 0; i<= y;i++){
            sum += i
        }
        return sum;
    }

변수의 범위
- 자바스크립트에서는 객체, 함수가 모두 변수
- 변수의 범위는 변수가 접근할 수 있는 변수, 객체, 함수의 집합

1. 지역변수
- 함수내에서 선언된 변수
- 지역변수는 변수가 선언된 함수 내에서 유효하고 함수가 종료되면 메모리에서 삭제

    // x,y,sum은 지역변수
    function func1(x,y){
        let sum = 0;
        ...
    }
    console.log(x); //undefined

    if(조건식){
        let x = 0;  //지역변수
    }
    console.log(x); //undefined
2. 전역변수
- 함수의 외부에서 선언된 변수
- 전역변수는 프로그램의 어느 영역에서나 접근할수 있으며, 웹페이지가 닫혀야 메모리에서 삭제

let global = 0;
    function func1(x,y){
        let sum = 0;
        console.log(global);    //ok
        ...
    }
    conosole.log(global)    //ok
